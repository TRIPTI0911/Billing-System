{"ast":null,"code":"var _jsxFileName = \"/Users/triptigupta/Desktop/systembilling/frontend/src/pages/DashboardPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\nimport * as XLSX from 'xlsx';\nimport { saveAs } from 'file-saver';\nimport { formatCurrency } from '../utils/formatter';\nimport TransactionTable from '../components/TransactionTable';\nimport HisabTally from '../pages/HisabTally';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DashboardPage = ({\n  filters,\n  setFilters\n}) => {\n  _s();\n  const {\n    partyId,\n    factoryId\n  } = filters;\n  const [partyOptions, setPartyOptions] = useState([]);\n  const [factoryOptions, setFactoryOptions] = useState([]);\n  const [partyData, setPartyData] = useState(null);\n  const [factoryData, setFactoryData] = useState(null);\n\n  // Load dropdown options once\n  useEffect(() => {\n    const fetchDropdowns = async () => {\n      try {\n        const [partiesRes, factoriesRes] = await Promise.all([axios.get('http://localhost:5001/api/parties'), axios.get('http://localhost:5001/api/factories')]);\n        setPartyOptions(partiesRes.data);\n        setFactoryOptions(factoriesRes.data);\n      } catch (err) {\n        console.error('Error fetching dropdowns', err);\n      }\n    };\n    fetchDropdowns();\n  }, []);\n\n  // Load party data when partyId changes\n  useEffect(() => {\n    if (partyId) {\n      axios.get(`http://localhost:5001/api/dashboard/party/${partyId}`).then(res => setPartyData(res.data)).catch(err => {\n        console.error(err);\n        setPartyData(null);\n      });\n    } else {\n      setPartyData(null);\n    }\n  }, [partyId]);\n\n  // Load factory data when factoryId changes\n  useEffect(() => {\n    if (factoryId) {\n      axios.get(`http://localhost:5001/api/dashboard/factory/${factoryId}`).then(res => setFactoryData(res.data)).catch(err => {\n        console.error(err);\n        setFactoryData(null);\n      });\n    } else {\n      setFactoryData(null);\n    }\n  }, [factoryId]);\n\n  // Handler to update global filters on select change\n  const handlePartyChange = e => {\n    const val = e.target.value || null;\n    setFilters(prev => ({\n      ...prev,\n      partyId: val\n    }));\n  };\n  const handleFactoryChange = e => {\n    const val = e.target.value || null;\n    setFilters(prev => ({\n      ...prev,\n      factoryId: val\n    }));\n  };\n\n  // ... export functions remain same as before, but use formatCurrency in PDF text\n  // For brevity, I won't repeat them here, but you can keep your existing exportSummaryAsPDF and exportSummaryAsExcel functions\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-3xl font-bold mb-6\",\n      children: \"Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"block font-semibold mb-1\",\n          children: \"Select Party:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: partyId || '',\n          onChange: handlePartyChange,\n          className: \"w-full border border-gray-300 p-2 rounded\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"-- Select Party --\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this), partyOptions.map(p => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: p.id,\n            children: p.name\n          }, p.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"block font-semibold mb-1\",\n          children: \"Select Factory:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: factoryId || '',\n          onChange: handleFactoryChange,\n          className: \"w-full border border-gray-300 p-2 rounded\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"-- Select Factory --\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this), factoryOptions.map(f => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: f.id,\n            children: f.name\n          }, f.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HisabTally, {\n      filters: filters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), partyData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white p-5 shadow rounded mb-8\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this), factoryData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white p-5 shadow rounded\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(DashboardPage, \"8WVAeBI8lgj82KjnZVFBXoiOovM=\");\n_c = DashboardPage;\nexport default DashboardPage;\nvar _c;\n$RefreshReg$(_c, \"DashboardPage\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsPDF","XLSX","saveAs","formatCurrency","TransactionTable","HisabTally","jsxDEV","_jsxDEV","DashboardPage","filters","setFilters","_s","partyId","factoryId","partyOptions","setPartyOptions","factoryOptions","setFactoryOptions","partyData","setPartyData","factoryData","setFactoryData","fetchDropdowns","partiesRes","factoriesRes","Promise","all","get","data","err","console","error","then","res","catch","handlePartyChange","e","val","target","value","prev","handleFactoryChange","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","map","p","id","name","f","_c","$RefreshReg$"],"sources":["/Users/triptigupta/Desktop/systembilling/frontend/src/pages/DashboardPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\nimport * as XLSX from 'xlsx';\nimport { saveAs } from 'file-saver';\nimport { formatCurrency } from '../utils/formatter';\nimport TransactionTable from '../components/TransactionTable';\nimport HisabTally from '../pages/HisabTally';\n\nconst DashboardPage = ({ filters, setFilters }) => {\n  const { partyId, factoryId } = filters;\n\n  const [partyOptions, setPartyOptions] = useState([]);\n  const [factoryOptions, setFactoryOptions] = useState([]);\n  const [partyData, setPartyData] = useState(null);\n  const [factoryData, setFactoryData] = useState(null);\n\n  // Load dropdown options once\n  useEffect(() => {\n    const fetchDropdowns = async () => {\n      try {\n        const [partiesRes, factoriesRes] = await Promise.all([\n          axios.get('http://localhost:5001/api/parties'),\n          axios.get('http://localhost:5001/api/factories'),\n        ]);\n        setPartyOptions(partiesRes.data);\n        setFactoryOptions(factoriesRes.data);\n      } catch (err) {\n        console.error('Error fetching dropdowns', err);\n      }\n    };\n    fetchDropdowns();\n  }, []);\n\n  // Load party data when partyId changes\n  useEffect(() => {\n    if (partyId) {\n      axios\n        .get(`http://localhost:5001/api/dashboard/party/${partyId}`)\n        .then((res) => setPartyData(res.data))\n        .catch((err) => {\n          console.error(err);\n          setPartyData(null);\n        });\n    } else {\n      setPartyData(null);\n    }\n  }, [partyId]);\n\n  // Load factory data when factoryId changes\n  useEffect(() => {\n    if (factoryId) {\n      axios\n        .get(`http://localhost:5001/api/dashboard/factory/${factoryId}`)\n        .then((res) => setFactoryData(res.data))\n        .catch((err) => {\n          console.error(err);\n          setFactoryData(null);\n        });\n    } else {\n      setFactoryData(null);\n    }\n  }, [factoryId]);\n\n  // Handler to update global filters on select change\n  const handlePartyChange = (e) => {\n    const val = e.target.value || null;\n    setFilters((prev) => ({ ...prev, partyId: val }));\n  };\n\n  const handleFactoryChange = (e) => {\n    const val = e.target.value || null;\n    setFilters((prev) => ({ ...prev, factoryId: val }));\n  };\n\n  // ... export functions remain same as before, but use formatCurrency in PDF text\n  // For brevity, I won't repeat them here, but you can keep your existing exportSummaryAsPDF and exportSummaryAsExcel functions\n\n  return (\n    <div className=\"p-6\">\n      <h2 className=\"text-3xl font-bold mb-6\">Dashboard</h2>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n        <div>\n          <label className=\"block font-semibold mb-1\">Select Party:</label>\n          <select\n            value={partyId || ''}\n            onChange={handlePartyChange}\n            className=\"w-full border border-gray-300 p-2 rounded\"\n          >\n            <option value=\"\">-- Select Party --</option>\n            {partyOptions.map((p) => (\n              <option key={p.id} value={p.id}>\n                {p.name}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div>\n          <label className=\"block font-semibold mb-1\">Select Factory:</label>\n          <select\n            value={factoryId || ''}\n            onChange={handleFactoryChange}\n            className=\"w-full border border-gray-300 p-2 rounded\"\n          >\n            <option value=\"\">-- Select Factory --</option>\n            {factoryOptions.map((f) => (\n              <option key={f.id} value={f.id}>\n                {f.name}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n\n      <HisabTally filters={filters} />\n\n      {partyData && (\n        <div className=\"bg-white p-5 shadow rounded mb-8\">\n          {/* Party Summary UI */}\n          {/* ... your existing party summary and transactions UI ... */}\n        </div>\n      )}\n\n      {factoryData && (\n        <div className=\"bg-white p-5 shadow rounded\">\n          {/* Factory Summary UI */}\n          {/* ... your existing factory summary and transactions UI ... */}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DashboardPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}